/*
This file is part of Envision.

Envision is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Envision is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Envision.  If not, see <http://www.gnu.org/licenses/>

Copywrite 2012 - Oregon State University

*/
/* soapC.cpp
   Generated by gSOAP 2.7.16 from EnvWebServices.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "stdafx.h"
#pragma hdrstop

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.16 2013-08-23 16:53:40 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_PointerTo_ns1__GetStudyAreaVersionResponse:
		return soap_in_PointerTo_ns1__GetStudyAreaVersionResponse(soap, NULL, NULL, "ns1:GetStudyAreaVersionResponse");
	case SOAP_TYPE_PointerTo_ns1__GetStudyAreaVersion:
		return soap_in_PointerTo_ns1__GetStudyAreaVersion(soap, NULL, NULL, "ns1:GetStudyAreaVersion");
	case SOAP_TYPE_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse:
		return soap_in_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse(soap, NULL, NULL, "ns1:GetStudyAreaSetupDateTimeResponse");
	case SOAP_TYPE_PointerTo_ns1__GetStudyAreaSetupDateTime:
		return soap_in_PointerTo_ns1__GetStudyAreaSetupDateTime(soap, NULL, NULL, "ns1:GetStudyAreaSetupDateTime");
	case SOAP_TYPE_PointerTo_ns1__GetEnvisionVersionResponse:
		return soap_in_PointerTo_ns1__GetEnvisionVersionResponse(soap, NULL, NULL, "ns1:GetEnvisionVersionResponse");
	case SOAP_TYPE_PointerTo_ns1__GetEnvisionVersion:
		return soap_in_PointerTo_ns1__GetEnvisionVersion(soap, NULL, NULL, "ns1:GetEnvisionVersion");
	case SOAP_TYPE_PointerTo_ns1__GetEnvisionSetupDateTimeResponse:
		return soap_in_PointerTo_ns1__GetEnvisionSetupDateTimeResponse(soap, NULL, NULL, "ns1:GetEnvisionSetupDateTimeResponse");
	case SOAP_TYPE_PointerTo_ns1__GetEnvisionSetupDateTime:
		return soap_in_PointerTo_ns1__GetEnvisionSetupDateTime(soap, NULL, NULL, "ns1:GetEnvisionSetupDateTime");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:GetStudyAreaVersionResponse"))
		{	*type = SOAP_TYPE__ns1__GetStudyAreaVersionResponse;
			return soap_in__ns1__GetStudyAreaVersionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetStudyAreaVersion"))
		{	*type = SOAP_TYPE__ns1__GetStudyAreaVersion;
			return soap_in__ns1__GetStudyAreaVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetStudyAreaSetupDateTimeResponse"))
		{	*type = SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse;
			return soap_in__ns1__GetStudyAreaSetupDateTimeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetStudyAreaSetupDateTime"))
		{	*type = SOAP_TYPE__ns1__GetStudyAreaSetupDateTime;
			return soap_in__ns1__GetStudyAreaSetupDateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetEnvisionVersionResponse"))
		{	*type = SOAP_TYPE__ns1__GetEnvisionVersionResponse;
			return soap_in__ns1__GetEnvisionVersionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetEnvisionVersion"))
		{	*type = SOAP_TYPE__ns1__GetEnvisionVersion;
			return soap_in__ns1__GetEnvisionVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetEnvisionSetupDateTimeResponse"))
		{	*type = SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse;
			return soap_in__ns1__GetEnvisionSetupDateTimeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetEnvisionSetupDateTime"))
		{	*type = SOAP_TYPE__ns1__GetEnvisionSetupDateTime;
			return soap_in__ns1__GetEnvisionSetupDateTime(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE__ns1__GetStudyAreaVersionResponse:
		return ((_ns1__GetStudyAreaVersionResponse *)ptr)->soap_out(soap, "ns1:GetStudyAreaVersionResponse", id, NULL);
	case SOAP_TYPE__ns1__GetStudyAreaVersion:
		return ((_ns1__GetStudyAreaVersion *)ptr)->soap_out(soap, "ns1:GetStudyAreaVersion", id, NULL);
	case SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse:
		return ((_ns1__GetStudyAreaSetupDateTimeResponse *)ptr)->soap_out(soap, "ns1:GetStudyAreaSetupDateTimeResponse", id, NULL);
	case SOAP_TYPE__ns1__GetStudyAreaSetupDateTime:
		return ((_ns1__GetStudyAreaSetupDateTime *)ptr)->soap_out(soap, "ns1:GetStudyAreaSetupDateTime", id, NULL);
	case SOAP_TYPE__ns1__GetEnvisionVersionResponse:
		return ((_ns1__GetEnvisionVersionResponse *)ptr)->soap_out(soap, "ns1:GetEnvisionVersionResponse", id, NULL);
	case SOAP_TYPE__ns1__GetEnvisionVersion:
		return ((_ns1__GetEnvisionVersion *)ptr)->soap_out(soap, "ns1:GetEnvisionVersion", id, NULL);
	case SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse:
		return ((_ns1__GetEnvisionSetupDateTimeResponse *)ptr)->soap_out(soap, "ns1:GetEnvisionSetupDateTimeResponse", id, NULL);
	case SOAP_TYPE__ns1__GetEnvisionSetupDateTime:
		return ((_ns1__GetEnvisionSetupDateTime *)ptr)->soap_out(soap, "ns1:GetEnvisionSetupDateTime", id, NULL);
	case SOAP_TYPE_PointerTo_ns1__GetStudyAreaVersionResponse:
		return soap_out_PointerTo_ns1__GetStudyAreaVersionResponse(soap, tag, id, (_ns1__GetStudyAreaVersionResponse *const*)ptr, "ns1:GetStudyAreaVersionResponse");
	case SOAP_TYPE_PointerTo_ns1__GetStudyAreaVersion:
		return soap_out_PointerTo_ns1__GetStudyAreaVersion(soap, tag, id, (_ns1__GetStudyAreaVersion *const*)ptr, "ns1:GetStudyAreaVersion");
	case SOAP_TYPE_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse:
		return soap_out_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse(soap, tag, id, (_ns1__GetStudyAreaSetupDateTimeResponse *const*)ptr, "ns1:GetStudyAreaSetupDateTimeResponse");
	case SOAP_TYPE_PointerTo_ns1__GetStudyAreaSetupDateTime:
		return soap_out_PointerTo_ns1__GetStudyAreaSetupDateTime(soap, tag, id, (_ns1__GetStudyAreaSetupDateTime *const*)ptr, "ns1:GetStudyAreaSetupDateTime");
	case SOAP_TYPE_PointerTo_ns1__GetEnvisionVersionResponse:
		return soap_out_PointerTo_ns1__GetEnvisionVersionResponse(soap, tag, id, (_ns1__GetEnvisionVersionResponse *const*)ptr, "ns1:GetEnvisionVersionResponse");
	case SOAP_TYPE_PointerTo_ns1__GetEnvisionVersion:
		return soap_out_PointerTo_ns1__GetEnvisionVersion(soap, tag, id, (_ns1__GetEnvisionVersion *const*)ptr, "ns1:GetEnvisionVersion");
	case SOAP_TYPE_PointerTo_ns1__GetEnvisionSetupDateTimeResponse:
		return soap_out_PointerTo_ns1__GetEnvisionSetupDateTimeResponse(soap, tag, id, (_ns1__GetEnvisionSetupDateTimeResponse *const*)ptr, "ns1:GetEnvisionSetupDateTimeResponse");
	case SOAP_TYPE_PointerTo_ns1__GetEnvisionSetupDateTime:
		return soap_out_PointerTo_ns1__GetEnvisionSetupDateTime(soap, tag, id, (_ns1__GetEnvisionSetupDateTime *const*)ptr, "ns1:GetEnvisionSetupDateTime");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__GetStudyAreaVersionResponse:
		((_ns1__GetStudyAreaVersionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetStudyAreaVersion:
		((_ns1__GetStudyAreaVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse:
		((_ns1__GetStudyAreaSetupDateTimeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetStudyAreaSetupDateTime:
		((_ns1__GetStudyAreaSetupDateTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetEnvisionVersionResponse:
		((_ns1__GetEnvisionVersionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetEnvisionVersion:
		((_ns1__GetEnvisionVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse:
		((_ns1__GetEnvisionSetupDateTimeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetEnvisionSetupDateTime:
		((_ns1__GetEnvisionSetupDateTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns3__GetStudyAreaVersion:
		soap_serialize___ns3__GetStudyAreaVersion(soap, (const struct __ns3__GetStudyAreaVersion *)ptr);
		break;
	case SOAP_TYPE___ns3__GetStudyAreaSetupDateTime:
		soap_serialize___ns3__GetStudyAreaSetupDateTime(soap, (const struct __ns3__GetStudyAreaSetupDateTime *)ptr);
		break;
	case SOAP_TYPE___ns3__GetEnvisionVersion:
		soap_serialize___ns3__GetEnvisionVersion(soap, (const struct __ns3__GetEnvisionVersion *)ptr);
		break;
	case SOAP_TYPE___ns3__GetEnvisionSetupDateTime:
		soap_serialize___ns3__GetEnvisionSetupDateTime(soap, (const struct __ns3__GetEnvisionSetupDateTime *)ptr);
		break;
	case SOAP_TYPE___ns2__GetStudyAreaVersion:
		soap_serialize___ns2__GetStudyAreaVersion(soap, (const struct __ns2__GetStudyAreaVersion *)ptr);
		break;
	case SOAP_TYPE___ns2__GetStudyAreaSetupDateTime:
		soap_serialize___ns2__GetStudyAreaSetupDateTime(soap, (const struct __ns2__GetStudyAreaSetupDateTime *)ptr);
		break;
	case SOAP_TYPE___ns2__GetEnvisionVersion:
		soap_serialize___ns2__GetEnvisionVersion(soap, (const struct __ns2__GetEnvisionVersion *)ptr);
		break;
	case SOAP_TYPE___ns2__GetEnvisionSetupDateTime:
		soap_serialize___ns2__GetEnvisionSetupDateTime(soap, (const struct __ns2__GetEnvisionSetupDateTime *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetStudyAreaVersionResponse:
		soap_serialize_PointerTo_ns1__GetStudyAreaVersionResponse(soap, (_ns1__GetStudyAreaVersionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetStudyAreaVersion:
		soap_serialize_PointerTo_ns1__GetStudyAreaVersion(soap, (_ns1__GetStudyAreaVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse:
		soap_serialize_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse(soap, (_ns1__GetStudyAreaSetupDateTimeResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetStudyAreaSetupDateTime:
		soap_serialize_PointerTo_ns1__GetStudyAreaSetupDateTime(soap, (_ns1__GetStudyAreaSetupDateTime *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetEnvisionVersionResponse:
		soap_serialize_PointerTo_ns1__GetEnvisionVersionResponse(soap, (_ns1__GetEnvisionVersionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetEnvisionVersion:
		soap_serialize_PointerTo_ns1__GetEnvisionVersion(soap, (_ns1__GetEnvisionVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetEnvisionSetupDateTimeResponse:
		soap_serialize_PointerTo_ns1__GetEnvisionSetupDateTimeResponse(soap, (_ns1__GetEnvisionSetupDateTimeResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetEnvisionSetupDateTime:
		soap_serialize_PointerTo_ns1__GetEnvisionSetupDateTime(soap, (_ns1__GetEnvisionSetupDateTime *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE__ns1__GetEnvisionSetupDateTime:
		return (void*)soap_instantiate__ns1__GetEnvisionSetupDateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse:
		return (void*)soap_instantiate__ns1__GetEnvisionSetupDateTimeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetEnvisionVersion:
		return (void*)soap_instantiate__ns1__GetEnvisionVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetEnvisionVersionResponse:
		return (void*)soap_instantiate__ns1__GetEnvisionVersionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetStudyAreaSetupDateTime:
		return (void*)soap_instantiate__ns1__GetStudyAreaSetupDateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse:
		return (void*)soap_instantiate__ns1__GetStudyAreaSetupDateTimeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetStudyAreaVersion:
		return (void*)soap_instantiate__ns1__GetStudyAreaVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetStudyAreaVersionResponse:
		return (void*)soap_instantiate__ns1__GetStudyAreaVersionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetEnvisionSetupDateTime:
		return (void*)soap_instantiate___ns2__GetEnvisionSetupDateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetEnvisionVersion:
		return (void*)soap_instantiate___ns2__GetEnvisionVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetStudyAreaSetupDateTime:
		return (void*)soap_instantiate___ns2__GetStudyAreaSetupDateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetStudyAreaVersion:
		return (void*)soap_instantiate___ns2__GetStudyAreaVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetEnvisionSetupDateTime:
		return (void*)soap_instantiate___ns3__GetEnvisionSetupDateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetEnvisionVersion:
		return (void*)soap_instantiate___ns3__GetEnvisionVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetStudyAreaSetupDateTime:
		return (void*)soap_instantiate___ns3__GetStudyAreaSetupDateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetStudyAreaVersion:
		return (void*)soap_instantiate___ns3__GetStudyAreaVersion(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE__ns1__GetEnvisionSetupDateTime:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetEnvisionSetupDateTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetEnvisionSetupDateTime*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetEnvisionSetupDateTimeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetEnvisionSetupDateTimeResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetEnvisionVersion:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetEnvisionVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetEnvisionVersion*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetEnvisionVersionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetEnvisionVersionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetEnvisionVersionResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetStudyAreaSetupDateTime:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetStudyAreaSetupDateTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetStudyAreaSetupDateTime*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetStudyAreaSetupDateTimeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetStudyAreaSetupDateTimeResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetStudyAreaVersion:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetStudyAreaVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetStudyAreaVersion*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetStudyAreaVersionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetStudyAreaVersionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetStudyAreaVersionResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns2__GetEnvisionSetupDateTime:
		if (p->size < 0)
			SOAP_DELETE((struct __ns2__GetEnvisionSetupDateTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns2__GetEnvisionSetupDateTime*)p->ptr);
		break;
	case SOAP_TYPE___ns2__GetEnvisionVersion:
		if (p->size < 0)
			SOAP_DELETE((struct __ns2__GetEnvisionVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns2__GetEnvisionVersion*)p->ptr);
		break;
	case SOAP_TYPE___ns2__GetStudyAreaSetupDateTime:
		if (p->size < 0)
			SOAP_DELETE((struct __ns2__GetStudyAreaSetupDateTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns2__GetStudyAreaSetupDateTime*)p->ptr);
		break;
	case SOAP_TYPE___ns2__GetStudyAreaVersion:
		if (p->size < 0)
			SOAP_DELETE((struct __ns2__GetStudyAreaVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns2__GetStudyAreaVersion*)p->ptr);
		break;
	case SOAP_TYPE___ns3__GetEnvisionSetupDateTime:
		if (p->size < 0)
			SOAP_DELETE((struct __ns3__GetEnvisionSetupDateTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns3__GetEnvisionSetupDateTime*)p->ptr);
		break;
	case SOAP_TYPE___ns3__GetEnvisionVersion:
		if (p->size < 0)
			SOAP_DELETE((struct __ns3__GetEnvisionVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns3__GetEnvisionVersion*)p->ptr);
		break;
	case SOAP_TYPE___ns3__GetStudyAreaSetupDateTime:
		if (p->size < 0)
			SOAP_DELETE((struct __ns3__GetStudyAreaSetupDateTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns3__GetStudyAreaSetupDateTime*)p->ptr);
		break;
	case SOAP_TYPE___ns3__GetStudyAreaVersion:
		if (p->size < 0)
			SOAP_DELETE((struct __ns3__GetStudyAreaVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns3__GetStudyAreaVersion*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetStudyAreaVersionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_ns1__GetStudyAreaVersionResponse::GetStudyAreaVersionResult);
	/* transient soap skipped */
}

void _ns1__GetStudyAreaVersionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetStudyAreaVersionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetStudyAreaVersionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStudyAreaVersionResponse(struct soap *soap, const char *tag, int id, const _ns1__GetStudyAreaVersionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetStudyAreaVersionResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:GetStudyAreaVersionResult");
	if (soap_out_LONG64(soap, "ns1:GetStudyAreaVersionResult", -1, &(a->_ns1__GetStudyAreaVersionResponse::GetStudyAreaVersionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetStudyAreaVersionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetStudyAreaVersionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetStudyAreaVersionResponse * SOAP_FMAC4 soap_in__ns1__GetStudyAreaVersionResponse(struct soap *soap, const char *tag, _ns1__GetStudyAreaVersionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetStudyAreaVersionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetStudyAreaVersionResponse, sizeof(_ns1__GetStudyAreaVersionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetStudyAreaVersionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetStudyAreaVersionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetStudyAreaVersionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetStudyAreaVersionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "ns1:GetStudyAreaVersionResult", &(a->_ns1__GetStudyAreaVersionResponse::GetStudyAreaVersionResult), "xsd:long"))
				{	soap_flag_GetStudyAreaVersionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetStudyAreaVersionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetStudyAreaVersionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetStudyAreaVersionResponse, 0, sizeof(_ns1__GetStudyAreaVersionResponse), 0, soap_copy__ns1__GetStudyAreaVersionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetStudyAreaVersionResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetStudyAreaVersionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetStudyAreaVersionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetStudyAreaVersionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetStudyAreaVersionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetStudyAreaVersionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetStudyAreaVersionResponse * SOAP_FMAC4 soap_get__ns1__GetStudyAreaVersionResponse(struct soap *soap, _ns1__GetStudyAreaVersionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetStudyAreaVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetStudyAreaVersionResponse * SOAP_FMAC2 soap_instantiate__ns1__GetStudyAreaVersionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetStudyAreaVersionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetStudyAreaVersionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetStudyAreaVersionResponse);
		if (size)
			*size = sizeof(_ns1__GetStudyAreaVersionResponse);
		((_ns1__GetStudyAreaVersionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetStudyAreaVersionResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetStudyAreaVersionResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetStudyAreaVersionResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetStudyAreaVersionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStudyAreaVersionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetStudyAreaVersionResponse %p -> %p\n", q, p));
	*(_ns1__GetStudyAreaVersionResponse*)p = *(_ns1__GetStudyAreaVersionResponse*)q;
}

void _ns1__GetStudyAreaVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetStudyAreaVersion::studyArea);
	/* transient soap skipped */
}

void _ns1__GetStudyAreaVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetStudyAreaVersion::studyArea);
	/* transient soap skipped */
}

int _ns1__GetStudyAreaVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetStudyAreaVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStudyAreaVersion(struct soap *soap, const char *tag, int id, const _ns1__GetStudyAreaVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetStudyAreaVersion), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:studyArea", -1, &(a->_ns1__GetStudyAreaVersion::studyArea), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetStudyAreaVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetStudyAreaVersion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetStudyAreaVersion * SOAP_FMAC4 soap_in__ns1__GetStudyAreaVersion(struct soap *soap, const char *tag, _ns1__GetStudyAreaVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetStudyAreaVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetStudyAreaVersion, sizeof(_ns1__GetStudyAreaVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetStudyAreaVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetStudyAreaVersion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_studyArea1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_studyArea1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:studyArea", &(a->_ns1__GetStudyAreaVersion::studyArea), "xsd:string"))
				{	soap_flag_studyArea1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetStudyAreaVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetStudyAreaVersion, 0, sizeof(_ns1__GetStudyAreaVersion), 0, soap_copy__ns1__GetStudyAreaVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetStudyAreaVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetStudyAreaVersion);
	if (this->soap_out(soap, tag?tag:"ns1:GetStudyAreaVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetStudyAreaVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetStudyAreaVersion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetStudyAreaVersion * SOAP_FMAC4 soap_get__ns1__GetStudyAreaVersion(struct soap *soap, _ns1__GetStudyAreaVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetStudyAreaVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetStudyAreaVersion * SOAP_FMAC2 soap_instantiate__ns1__GetStudyAreaVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetStudyAreaVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetStudyAreaVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetStudyAreaVersion);
		if (size)
			*size = sizeof(_ns1__GetStudyAreaVersion);
		((_ns1__GetStudyAreaVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetStudyAreaVersion[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetStudyAreaVersion);
		for (int i = 0; i < n; i++)
			((_ns1__GetStudyAreaVersion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetStudyAreaVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStudyAreaVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetStudyAreaVersion %p -> %p\n", q, p));
	*(_ns1__GetStudyAreaVersion*)p = *(_ns1__GetStudyAreaVersion*)q;
}

void _ns1__GetStudyAreaSetupDateTimeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_time(soap, &this->_ns1__GetStudyAreaSetupDateTimeResponse::GetStudyAreaSetupDateTimeResult);
	/* transient soap skipped */
}

void _ns1__GetStudyAreaSetupDateTimeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetStudyAreaSetupDateTimeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetStudyAreaSetupDateTimeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStudyAreaSetupDateTimeResponse(struct soap *soap, const char *tag, int id, const _ns1__GetStudyAreaSetupDateTimeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:GetStudyAreaSetupDateTimeResult");
	if (soap_out_time(soap, "ns1:GetStudyAreaSetupDateTimeResult", -1, &(a->_ns1__GetStudyAreaSetupDateTimeResponse::GetStudyAreaSetupDateTimeResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetStudyAreaSetupDateTimeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetStudyAreaSetupDateTimeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetStudyAreaSetupDateTimeResponse * SOAP_FMAC4 soap_in__ns1__GetStudyAreaSetupDateTimeResponse(struct soap *soap, const char *tag, _ns1__GetStudyAreaSetupDateTimeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetStudyAreaSetupDateTimeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse, sizeof(_ns1__GetStudyAreaSetupDateTimeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetStudyAreaSetupDateTimeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetStudyAreaSetupDateTimeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetStudyAreaSetupDateTimeResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "ns1:GetStudyAreaSetupDateTimeResult", &(a->_ns1__GetStudyAreaSetupDateTimeResponse::GetStudyAreaSetupDateTimeResult), "xsd:dateTime"))
				{	soap_flag_GetStudyAreaSetupDateTimeResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetStudyAreaSetupDateTimeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetStudyAreaSetupDateTimeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse, 0, sizeof(_ns1__GetStudyAreaSetupDateTimeResponse), 0, soap_copy__ns1__GetStudyAreaSetupDateTimeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetStudyAreaSetupDateTimeResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetStudyAreaSetupDateTimeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetStudyAreaSetupDateTimeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetStudyAreaSetupDateTimeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetStudyAreaSetupDateTimeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetStudyAreaSetupDateTimeResponse * SOAP_FMAC4 soap_get__ns1__GetStudyAreaSetupDateTimeResponse(struct soap *soap, _ns1__GetStudyAreaSetupDateTimeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetStudyAreaSetupDateTimeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetStudyAreaSetupDateTimeResponse * SOAP_FMAC2 soap_instantiate__ns1__GetStudyAreaSetupDateTimeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetStudyAreaSetupDateTimeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetStudyAreaSetupDateTimeResponse);
		if (size)
			*size = sizeof(_ns1__GetStudyAreaSetupDateTimeResponse);
		((_ns1__GetStudyAreaSetupDateTimeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetStudyAreaSetupDateTimeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetStudyAreaSetupDateTimeResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetStudyAreaSetupDateTimeResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetStudyAreaSetupDateTimeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStudyAreaSetupDateTimeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetStudyAreaSetupDateTimeResponse %p -> %p\n", q, p));
	*(_ns1__GetStudyAreaSetupDateTimeResponse*)p = *(_ns1__GetStudyAreaSetupDateTimeResponse*)q;
}

void _ns1__GetStudyAreaSetupDateTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetStudyAreaSetupDateTime::studyArea);
	/* transient soap skipped */
}

void _ns1__GetStudyAreaSetupDateTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetStudyAreaSetupDateTime::studyArea);
	/* transient soap skipped */
}

int _ns1__GetStudyAreaSetupDateTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetStudyAreaSetupDateTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStudyAreaSetupDateTime(struct soap *soap, const char *tag, int id, const _ns1__GetStudyAreaSetupDateTime *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetStudyAreaSetupDateTime), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:studyArea", -1, &(a->_ns1__GetStudyAreaSetupDateTime::studyArea), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetStudyAreaSetupDateTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetStudyAreaSetupDateTime(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetStudyAreaSetupDateTime * SOAP_FMAC4 soap_in__ns1__GetStudyAreaSetupDateTime(struct soap *soap, const char *tag, _ns1__GetStudyAreaSetupDateTime *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetStudyAreaSetupDateTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetStudyAreaSetupDateTime, sizeof(_ns1__GetStudyAreaSetupDateTime), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetStudyAreaSetupDateTime)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetStudyAreaSetupDateTime *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_studyArea1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_studyArea1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:studyArea", &(a->_ns1__GetStudyAreaSetupDateTime::studyArea), "xsd:string"))
				{	soap_flag_studyArea1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetStudyAreaSetupDateTime *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetStudyAreaSetupDateTime, 0, sizeof(_ns1__GetStudyAreaSetupDateTime), 0, soap_copy__ns1__GetStudyAreaSetupDateTime);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetStudyAreaSetupDateTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetStudyAreaSetupDateTime);
	if (this->soap_out(soap, tag?tag:"ns1:GetStudyAreaSetupDateTime", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetStudyAreaSetupDateTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetStudyAreaSetupDateTime(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetStudyAreaSetupDateTime * SOAP_FMAC4 soap_get__ns1__GetStudyAreaSetupDateTime(struct soap *soap, _ns1__GetStudyAreaSetupDateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetStudyAreaSetupDateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetStudyAreaSetupDateTime * SOAP_FMAC2 soap_instantiate__ns1__GetStudyAreaSetupDateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetStudyAreaSetupDateTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetStudyAreaSetupDateTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetStudyAreaSetupDateTime);
		if (size)
			*size = sizeof(_ns1__GetStudyAreaSetupDateTime);
		((_ns1__GetStudyAreaSetupDateTime*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetStudyAreaSetupDateTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetStudyAreaSetupDateTime);
		for (int i = 0; i < n; i++)
			((_ns1__GetStudyAreaSetupDateTime*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetStudyAreaSetupDateTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStudyAreaSetupDateTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetStudyAreaSetupDateTime %p -> %p\n", q, p));
	*(_ns1__GetStudyAreaSetupDateTime*)p = *(_ns1__GetStudyAreaSetupDateTime*)q;
}

void _ns1__GetEnvisionVersionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_ns1__GetEnvisionVersionResponse::GetEnvisionVersionResult);
	/* transient soap skipped */
}

void _ns1__GetEnvisionVersionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetEnvisionVersionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetEnvisionVersionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEnvisionVersionResponse(struct soap *soap, const char *tag, int id, const _ns1__GetEnvisionVersionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetEnvisionVersionResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:GetEnvisionVersionResult");
	if (soap_out_LONG64(soap, "ns1:GetEnvisionVersionResult", -1, &(a->_ns1__GetEnvisionVersionResponse::GetEnvisionVersionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetEnvisionVersionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetEnvisionVersionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetEnvisionVersionResponse * SOAP_FMAC4 soap_in__ns1__GetEnvisionVersionResponse(struct soap *soap, const char *tag, _ns1__GetEnvisionVersionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetEnvisionVersionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetEnvisionVersionResponse, sizeof(_ns1__GetEnvisionVersionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetEnvisionVersionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetEnvisionVersionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetEnvisionVersionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetEnvisionVersionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "ns1:GetEnvisionVersionResult", &(a->_ns1__GetEnvisionVersionResponse::GetEnvisionVersionResult), "xsd:long"))
				{	soap_flag_GetEnvisionVersionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetEnvisionVersionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetEnvisionVersionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetEnvisionVersionResponse, 0, sizeof(_ns1__GetEnvisionVersionResponse), 0, soap_copy__ns1__GetEnvisionVersionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetEnvisionVersionResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetEnvisionVersionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetEnvisionVersionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetEnvisionVersionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetEnvisionVersionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetEnvisionVersionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetEnvisionVersionResponse * SOAP_FMAC4 soap_get__ns1__GetEnvisionVersionResponse(struct soap *soap, _ns1__GetEnvisionVersionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetEnvisionVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetEnvisionVersionResponse * SOAP_FMAC2 soap_instantiate__ns1__GetEnvisionVersionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetEnvisionVersionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetEnvisionVersionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetEnvisionVersionResponse);
		if (size)
			*size = sizeof(_ns1__GetEnvisionVersionResponse);
		((_ns1__GetEnvisionVersionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetEnvisionVersionResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetEnvisionVersionResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetEnvisionVersionResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetEnvisionVersionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetEnvisionVersionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetEnvisionVersionResponse %p -> %p\n", q, p));
	*(_ns1__GetEnvisionVersionResponse*)p = *(_ns1__GetEnvisionVersionResponse*)q;
}

void _ns1__GetEnvisionVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetEnvisionVersion::build);
	/* transient soap skipped */
}

void _ns1__GetEnvisionVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetEnvisionVersion::build);
	/* transient soap skipped */
}

int _ns1__GetEnvisionVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetEnvisionVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEnvisionVersion(struct soap *soap, const char *tag, int id, const _ns1__GetEnvisionVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetEnvisionVersion), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:build", -1, &(a->_ns1__GetEnvisionVersion::build), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetEnvisionVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetEnvisionVersion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetEnvisionVersion * SOAP_FMAC4 soap_in__ns1__GetEnvisionVersion(struct soap *soap, const char *tag, _ns1__GetEnvisionVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetEnvisionVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetEnvisionVersion, sizeof(_ns1__GetEnvisionVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetEnvisionVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetEnvisionVersion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_build1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_build1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:build", &(a->_ns1__GetEnvisionVersion::build), "xsd:string"))
				{	soap_flag_build1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetEnvisionVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetEnvisionVersion, 0, sizeof(_ns1__GetEnvisionVersion), 0, soap_copy__ns1__GetEnvisionVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetEnvisionVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetEnvisionVersion);
	if (this->soap_out(soap, tag?tag:"ns1:GetEnvisionVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetEnvisionVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetEnvisionVersion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetEnvisionVersion * SOAP_FMAC4 soap_get__ns1__GetEnvisionVersion(struct soap *soap, _ns1__GetEnvisionVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetEnvisionVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetEnvisionVersion * SOAP_FMAC2 soap_instantiate__ns1__GetEnvisionVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetEnvisionVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetEnvisionVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetEnvisionVersion);
		if (size)
			*size = sizeof(_ns1__GetEnvisionVersion);
		((_ns1__GetEnvisionVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetEnvisionVersion[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetEnvisionVersion);
		for (int i = 0; i < n; i++)
			((_ns1__GetEnvisionVersion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetEnvisionVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetEnvisionVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetEnvisionVersion %p -> %p\n", q, p));
	*(_ns1__GetEnvisionVersion*)p = *(_ns1__GetEnvisionVersion*)q;
}

void _ns1__GetEnvisionSetupDateTimeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_time(soap, &this->_ns1__GetEnvisionSetupDateTimeResponse::GetEnvisionSetupDateTimeResult);
	/* transient soap skipped */
}

void _ns1__GetEnvisionSetupDateTimeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetEnvisionSetupDateTimeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetEnvisionSetupDateTimeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEnvisionSetupDateTimeResponse(struct soap *soap, const char *tag, int id, const _ns1__GetEnvisionSetupDateTimeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:GetEnvisionSetupDateTimeResult");
	if (soap_out_time(soap, "ns1:GetEnvisionSetupDateTimeResult", -1, &(a->_ns1__GetEnvisionSetupDateTimeResponse::GetEnvisionSetupDateTimeResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetEnvisionSetupDateTimeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetEnvisionSetupDateTimeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetEnvisionSetupDateTimeResponse * SOAP_FMAC4 soap_in__ns1__GetEnvisionSetupDateTimeResponse(struct soap *soap, const char *tag, _ns1__GetEnvisionSetupDateTimeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetEnvisionSetupDateTimeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse, sizeof(_ns1__GetEnvisionSetupDateTimeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetEnvisionSetupDateTimeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetEnvisionSetupDateTimeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetEnvisionSetupDateTimeResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "ns1:GetEnvisionSetupDateTimeResult", &(a->_ns1__GetEnvisionSetupDateTimeResponse::GetEnvisionSetupDateTimeResult), "xsd:dateTime"))
				{	soap_flag_GetEnvisionSetupDateTimeResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetEnvisionSetupDateTimeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetEnvisionSetupDateTimeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse, 0, sizeof(_ns1__GetEnvisionSetupDateTimeResponse), 0, soap_copy__ns1__GetEnvisionSetupDateTimeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetEnvisionSetupDateTimeResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GetEnvisionSetupDateTimeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetEnvisionSetupDateTimeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetEnvisionSetupDateTimeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetEnvisionSetupDateTimeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetEnvisionSetupDateTimeResponse * SOAP_FMAC4 soap_get__ns1__GetEnvisionSetupDateTimeResponse(struct soap *soap, _ns1__GetEnvisionSetupDateTimeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetEnvisionSetupDateTimeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetEnvisionSetupDateTimeResponse * SOAP_FMAC2 soap_instantiate__ns1__GetEnvisionSetupDateTimeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetEnvisionSetupDateTimeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetEnvisionSetupDateTimeResponse);
		if (size)
			*size = sizeof(_ns1__GetEnvisionSetupDateTimeResponse);
		((_ns1__GetEnvisionSetupDateTimeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetEnvisionSetupDateTimeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetEnvisionSetupDateTimeResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetEnvisionSetupDateTimeResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetEnvisionSetupDateTimeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetEnvisionSetupDateTimeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetEnvisionSetupDateTimeResponse %p -> %p\n", q, p));
	*(_ns1__GetEnvisionSetupDateTimeResponse*)p = *(_ns1__GetEnvisionSetupDateTimeResponse*)q;
}

void _ns1__GetEnvisionSetupDateTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetEnvisionSetupDateTime::build);
	/* transient soap skipped */
}

void _ns1__GetEnvisionSetupDateTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetEnvisionSetupDateTime::build);
	/* transient soap skipped */
}

int _ns1__GetEnvisionSetupDateTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetEnvisionSetupDateTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEnvisionSetupDateTime(struct soap *soap, const char *tag, int id, const _ns1__GetEnvisionSetupDateTime *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetEnvisionSetupDateTime), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:build", -1, &(a->_ns1__GetEnvisionSetupDateTime::build), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetEnvisionSetupDateTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetEnvisionSetupDateTime(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetEnvisionSetupDateTime * SOAP_FMAC4 soap_in__ns1__GetEnvisionSetupDateTime(struct soap *soap, const char *tag, _ns1__GetEnvisionSetupDateTime *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetEnvisionSetupDateTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetEnvisionSetupDateTime, sizeof(_ns1__GetEnvisionSetupDateTime), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetEnvisionSetupDateTime)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetEnvisionSetupDateTime *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_build1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_build1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:build", &(a->_ns1__GetEnvisionSetupDateTime::build), "xsd:string"))
				{	soap_flag_build1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetEnvisionSetupDateTime *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetEnvisionSetupDateTime, 0, sizeof(_ns1__GetEnvisionSetupDateTime), 0, soap_copy__ns1__GetEnvisionSetupDateTime);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetEnvisionSetupDateTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetEnvisionSetupDateTime);
	if (this->soap_out(soap, tag?tag:"ns1:GetEnvisionSetupDateTime", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetEnvisionSetupDateTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetEnvisionSetupDateTime(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetEnvisionSetupDateTime * SOAP_FMAC4 soap_get__ns1__GetEnvisionSetupDateTime(struct soap *soap, _ns1__GetEnvisionSetupDateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetEnvisionSetupDateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetEnvisionSetupDateTime * SOAP_FMAC2 soap_instantiate__ns1__GetEnvisionSetupDateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetEnvisionSetupDateTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetEnvisionSetupDateTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetEnvisionSetupDateTime);
		if (size)
			*size = sizeof(_ns1__GetEnvisionSetupDateTime);
		((_ns1__GetEnvisionSetupDateTime*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetEnvisionSetupDateTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetEnvisionSetupDateTime);
		for (int i = 0; i < n; i++)
			((_ns1__GetEnvisionSetupDateTime*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetEnvisionSetupDateTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetEnvisionSetupDateTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetEnvisionSetupDateTime %p -> %p\n", q, p));
	*(_ns1__GetEnvisionSetupDateTime*)p = *(_ns1__GetEnvisionSetupDateTime*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetStudyAreaVersion(struct soap *soap, struct __ns3__GetStudyAreaVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetStudyAreaVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetStudyAreaVersion(struct soap *soap, const struct __ns3__GetStudyAreaVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetStudyAreaVersion(soap, &a->ns1__GetStudyAreaVersion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetStudyAreaVersion(struct soap *soap, const char *tag, int id, const struct __ns3__GetStudyAreaVersion *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetStudyAreaVersion(soap, "ns1:GetStudyAreaVersion", -1, &a->ns1__GetStudyAreaVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetStudyAreaVersion * SOAP_FMAC4 soap_in___ns3__GetStudyAreaVersion(struct soap *soap, const char *tag, struct __ns3__GetStudyAreaVersion *a, const char *type)
{
	size_t soap_flag_ns1__GetStudyAreaVersion = 1;
	short soap_flag;
	a = (struct __ns3__GetStudyAreaVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetStudyAreaVersion, sizeof(struct __ns3__GetStudyAreaVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetStudyAreaVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetStudyAreaVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetStudyAreaVersion(soap, "ns1:GetStudyAreaVersion", &a->ns1__GetStudyAreaVersion, ""))
				{	soap_flag_ns1__GetStudyAreaVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetStudyAreaVersion(struct soap *soap, const struct __ns3__GetStudyAreaVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetStudyAreaVersion(soap, tag?tag:"-ns3:GetStudyAreaVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetStudyAreaVersion * SOAP_FMAC4 soap_get___ns3__GetStudyAreaVersion(struct soap *soap, struct __ns3__GetStudyAreaVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetStudyAreaVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns3__GetStudyAreaVersion * SOAP_FMAC2 soap_instantiate___ns3__GetStudyAreaVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetStudyAreaVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetStudyAreaVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__GetStudyAreaVersion);
		if (size)
			*size = sizeof(struct __ns3__GetStudyAreaVersion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__GetStudyAreaVersion[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetStudyAreaVersion);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetStudyAreaVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetStudyAreaVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetStudyAreaVersion %p -> %p\n", q, p));
	*(struct __ns3__GetStudyAreaVersion*)p = *(struct __ns3__GetStudyAreaVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetStudyAreaSetupDateTime(struct soap *soap, struct __ns3__GetStudyAreaSetupDateTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetStudyAreaSetupDateTime = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetStudyAreaSetupDateTime(struct soap *soap, const struct __ns3__GetStudyAreaSetupDateTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetStudyAreaSetupDateTime(soap, &a->ns1__GetStudyAreaSetupDateTime);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetStudyAreaSetupDateTime(struct soap *soap, const char *tag, int id, const struct __ns3__GetStudyAreaSetupDateTime *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetStudyAreaSetupDateTime(soap, "ns1:GetStudyAreaSetupDateTime", -1, &a->ns1__GetStudyAreaSetupDateTime, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetStudyAreaSetupDateTime * SOAP_FMAC4 soap_in___ns3__GetStudyAreaSetupDateTime(struct soap *soap, const char *tag, struct __ns3__GetStudyAreaSetupDateTime *a, const char *type)
{
	size_t soap_flag_ns1__GetStudyAreaSetupDateTime = 1;
	short soap_flag;
	a = (struct __ns3__GetStudyAreaSetupDateTime *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetStudyAreaSetupDateTime, sizeof(struct __ns3__GetStudyAreaSetupDateTime), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetStudyAreaSetupDateTime(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetStudyAreaSetupDateTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetStudyAreaSetupDateTime(soap, "ns1:GetStudyAreaSetupDateTime", &a->ns1__GetStudyAreaSetupDateTime, ""))
				{	soap_flag_ns1__GetStudyAreaSetupDateTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetStudyAreaSetupDateTime(struct soap *soap, const struct __ns3__GetStudyAreaSetupDateTime *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetStudyAreaSetupDateTime(soap, tag?tag:"-ns3:GetStudyAreaSetupDateTime", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetStudyAreaSetupDateTime * SOAP_FMAC4 soap_get___ns3__GetStudyAreaSetupDateTime(struct soap *soap, struct __ns3__GetStudyAreaSetupDateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetStudyAreaSetupDateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns3__GetStudyAreaSetupDateTime * SOAP_FMAC2 soap_instantiate___ns3__GetStudyAreaSetupDateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetStudyAreaSetupDateTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetStudyAreaSetupDateTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__GetStudyAreaSetupDateTime);
		if (size)
			*size = sizeof(struct __ns3__GetStudyAreaSetupDateTime);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__GetStudyAreaSetupDateTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetStudyAreaSetupDateTime);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetStudyAreaSetupDateTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetStudyAreaSetupDateTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetStudyAreaSetupDateTime %p -> %p\n", q, p));
	*(struct __ns3__GetStudyAreaSetupDateTime*)p = *(struct __ns3__GetStudyAreaSetupDateTime*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetEnvisionVersion(struct soap *soap, struct __ns3__GetEnvisionVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetEnvisionVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetEnvisionVersion(struct soap *soap, const struct __ns3__GetEnvisionVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetEnvisionVersion(soap, &a->ns1__GetEnvisionVersion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetEnvisionVersion(struct soap *soap, const char *tag, int id, const struct __ns3__GetEnvisionVersion *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetEnvisionVersion(soap, "ns1:GetEnvisionVersion", -1, &a->ns1__GetEnvisionVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetEnvisionVersion * SOAP_FMAC4 soap_in___ns3__GetEnvisionVersion(struct soap *soap, const char *tag, struct __ns3__GetEnvisionVersion *a, const char *type)
{
	size_t soap_flag_ns1__GetEnvisionVersion = 1;
	short soap_flag;
	a = (struct __ns3__GetEnvisionVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetEnvisionVersion, sizeof(struct __ns3__GetEnvisionVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetEnvisionVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetEnvisionVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetEnvisionVersion(soap, "ns1:GetEnvisionVersion", &a->ns1__GetEnvisionVersion, ""))
				{	soap_flag_ns1__GetEnvisionVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetEnvisionVersion(struct soap *soap, const struct __ns3__GetEnvisionVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetEnvisionVersion(soap, tag?tag:"-ns3:GetEnvisionVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetEnvisionVersion * SOAP_FMAC4 soap_get___ns3__GetEnvisionVersion(struct soap *soap, struct __ns3__GetEnvisionVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetEnvisionVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns3__GetEnvisionVersion * SOAP_FMAC2 soap_instantiate___ns3__GetEnvisionVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetEnvisionVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetEnvisionVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__GetEnvisionVersion);
		if (size)
			*size = sizeof(struct __ns3__GetEnvisionVersion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__GetEnvisionVersion[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetEnvisionVersion);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetEnvisionVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetEnvisionVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetEnvisionVersion %p -> %p\n", q, p));
	*(struct __ns3__GetEnvisionVersion*)p = *(struct __ns3__GetEnvisionVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetEnvisionSetupDateTime(struct soap *soap, struct __ns3__GetEnvisionSetupDateTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetEnvisionSetupDateTime = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetEnvisionSetupDateTime(struct soap *soap, const struct __ns3__GetEnvisionSetupDateTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetEnvisionSetupDateTime(soap, &a->ns1__GetEnvisionSetupDateTime);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetEnvisionSetupDateTime(struct soap *soap, const char *tag, int id, const struct __ns3__GetEnvisionSetupDateTime *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetEnvisionSetupDateTime(soap, "ns1:GetEnvisionSetupDateTime", -1, &a->ns1__GetEnvisionSetupDateTime, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetEnvisionSetupDateTime * SOAP_FMAC4 soap_in___ns3__GetEnvisionSetupDateTime(struct soap *soap, const char *tag, struct __ns3__GetEnvisionSetupDateTime *a, const char *type)
{
	size_t soap_flag_ns1__GetEnvisionSetupDateTime = 1;
	short soap_flag;
	a = (struct __ns3__GetEnvisionSetupDateTime *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetEnvisionSetupDateTime, sizeof(struct __ns3__GetEnvisionSetupDateTime), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetEnvisionSetupDateTime(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetEnvisionSetupDateTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetEnvisionSetupDateTime(soap, "ns1:GetEnvisionSetupDateTime", &a->ns1__GetEnvisionSetupDateTime, ""))
				{	soap_flag_ns1__GetEnvisionSetupDateTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetEnvisionSetupDateTime(struct soap *soap, const struct __ns3__GetEnvisionSetupDateTime *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetEnvisionSetupDateTime(soap, tag?tag:"-ns3:GetEnvisionSetupDateTime", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetEnvisionSetupDateTime * SOAP_FMAC4 soap_get___ns3__GetEnvisionSetupDateTime(struct soap *soap, struct __ns3__GetEnvisionSetupDateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetEnvisionSetupDateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns3__GetEnvisionSetupDateTime * SOAP_FMAC2 soap_instantiate___ns3__GetEnvisionSetupDateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetEnvisionSetupDateTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetEnvisionSetupDateTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__GetEnvisionSetupDateTime);
		if (size)
			*size = sizeof(struct __ns3__GetEnvisionSetupDateTime);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__GetEnvisionSetupDateTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetEnvisionSetupDateTime);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetEnvisionSetupDateTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetEnvisionSetupDateTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetEnvisionSetupDateTime %p -> %p\n", q, p));
	*(struct __ns3__GetEnvisionSetupDateTime*)p = *(struct __ns3__GetEnvisionSetupDateTime*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetStudyAreaVersion(struct soap *soap, struct __ns2__GetStudyAreaVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetStudyAreaVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetStudyAreaVersion(struct soap *soap, const struct __ns2__GetStudyAreaVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetStudyAreaVersion(soap, &a->ns1__GetStudyAreaVersion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetStudyAreaVersion(struct soap *soap, const char *tag, int id, const struct __ns2__GetStudyAreaVersion *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetStudyAreaVersion(soap, "ns1:GetStudyAreaVersion", -1, &a->ns1__GetStudyAreaVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetStudyAreaVersion * SOAP_FMAC4 soap_in___ns2__GetStudyAreaVersion(struct soap *soap, const char *tag, struct __ns2__GetStudyAreaVersion *a, const char *type)
{
	size_t soap_flag_ns1__GetStudyAreaVersion = 1;
	short soap_flag;
	a = (struct __ns2__GetStudyAreaVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetStudyAreaVersion, sizeof(struct __ns2__GetStudyAreaVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetStudyAreaVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetStudyAreaVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetStudyAreaVersion(soap, "ns1:GetStudyAreaVersion", &a->ns1__GetStudyAreaVersion, ""))
				{	soap_flag_ns1__GetStudyAreaVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetStudyAreaVersion(struct soap *soap, const struct __ns2__GetStudyAreaVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetStudyAreaVersion(soap, tag?tag:"-ns2:GetStudyAreaVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetStudyAreaVersion * SOAP_FMAC4 soap_get___ns2__GetStudyAreaVersion(struct soap *soap, struct __ns2__GetStudyAreaVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetStudyAreaVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns2__GetStudyAreaVersion * SOAP_FMAC2 soap_instantiate___ns2__GetStudyAreaVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetStudyAreaVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetStudyAreaVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__GetStudyAreaVersion);
		if (size)
			*size = sizeof(struct __ns2__GetStudyAreaVersion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__GetStudyAreaVersion[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetStudyAreaVersion);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetStudyAreaVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetStudyAreaVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetStudyAreaVersion %p -> %p\n", q, p));
	*(struct __ns2__GetStudyAreaVersion*)p = *(struct __ns2__GetStudyAreaVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetStudyAreaSetupDateTime(struct soap *soap, struct __ns2__GetStudyAreaSetupDateTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetStudyAreaSetupDateTime = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetStudyAreaSetupDateTime(struct soap *soap, const struct __ns2__GetStudyAreaSetupDateTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetStudyAreaSetupDateTime(soap, &a->ns1__GetStudyAreaSetupDateTime);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetStudyAreaSetupDateTime(struct soap *soap, const char *tag, int id, const struct __ns2__GetStudyAreaSetupDateTime *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetStudyAreaSetupDateTime(soap, "ns1:GetStudyAreaSetupDateTime", -1, &a->ns1__GetStudyAreaSetupDateTime, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetStudyAreaSetupDateTime * SOAP_FMAC4 soap_in___ns2__GetStudyAreaSetupDateTime(struct soap *soap, const char *tag, struct __ns2__GetStudyAreaSetupDateTime *a, const char *type)
{
	size_t soap_flag_ns1__GetStudyAreaSetupDateTime = 1;
	short soap_flag;
	a = (struct __ns2__GetStudyAreaSetupDateTime *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetStudyAreaSetupDateTime, sizeof(struct __ns2__GetStudyAreaSetupDateTime), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetStudyAreaSetupDateTime(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetStudyAreaSetupDateTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetStudyAreaSetupDateTime(soap, "ns1:GetStudyAreaSetupDateTime", &a->ns1__GetStudyAreaSetupDateTime, ""))
				{	soap_flag_ns1__GetStudyAreaSetupDateTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetStudyAreaSetupDateTime(struct soap *soap, const struct __ns2__GetStudyAreaSetupDateTime *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetStudyAreaSetupDateTime(soap, tag?tag:"-ns2:GetStudyAreaSetupDateTime", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetStudyAreaSetupDateTime * SOAP_FMAC4 soap_get___ns2__GetStudyAreaSetupDateTime(struct soap *soap, struct __ns2__GetStudyAreaSetupDateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetStudyAreaSetupDateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns2__GetStudyAreaSetupDateTime * SOAP_FMAC2 soap_instantiate___ns2__GetStudyAreaSetupDateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetStudyAreaSetupDateTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetStudyAreaSetupDateTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__GetStudyAreaSetupDateTime);
		if (size)
			*size = sizeof(struct __ns2__GetStudyAreaSetupDateTime);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__GetStudyAreaSetupDateTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetStudyAreaSetupDateTime);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetStudyAreaSetupDateTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetStudyAreaSetupDateTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetStudyAreaSetupDateTime %p -> %p\n", q, p));
	*(struct __ns2__GetStudyAreaSetupDateTime*)p = *(struct __ns2__GetStudyAreaSetupDateTime*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetEnvisionVersion(struct soap *soap, struct __ns2__GetEnvisionVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetEnvisionVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetEnvisionVersion(struct soap *soap, const struct __ns2__GetEnvisionVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetEnvisionVersion(soap, &a->ns1__GetEnvisionVersion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetEnvisionVersion(struct soap *soap, const char *tag, int id, const struct __ns2__GetEnvisionVersion *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetEnvisionVersion(soap, "ns1:GetEnvisionVersion", -1, &a->ns1__GetEnvisionVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetEnvisionVersion * SOAP_FMAC4 soap_in___ns2__GetEnvisionVersion(struct soap *soap, const char *tag, struct __ns2__GetEnvisionVersion *a, const char *type)
{
	size_t soap_flag_ns1__GetEnvisionVersion = 1;
	short soap_flag;
	a = (struct __ns2__GetEnvisionVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetEnvisionVersion, sizeof(struct __ns2__GetEnvisionVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetEnvisionVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetEnvisionVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetEnvisionVersion(soap, "ns1:GetEnvisionVersion", &a->ns1__GetEnvisionVersion, ""))
				{	soap_flag_ns1__GetEnvisionVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetEnvisionVersion(struct soap *soap, const struct __ns2__GetEnvisionVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetEnvisionVersion(soap, tag?tag:"-ns2:GetEnvisionVersion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetEnvisionVersion * SOAP_FMAC4 soap_get___ns2__GetEnvisionVersion(struct soap *soap, struct __ns2__GetEnvisionVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetEnvisionVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns2__GetEnvisionVersion * SOAP_FMAC2 soap_instantiate___ns2__GetEnvisionVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetEnvisionVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetEnvisionVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__GetEnvisionVersion);
		if (size)
			*size = sizeof(struct __ns2__GetEnvisionVersion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__GetEnvisionVersion[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetEnvisionVersion);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetEnvisionVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetEnvisionVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetEnvisionVersion %p -> %p\n", q, p));
	*(struct __ns2__GetEnvisionVersion*)p = *(struct __ns2__GetEnvisionVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetEnvisionSetupDateTime(struct soap *soap, struct __ns2__GetEnvisionSetupDateTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetEnvisionSetupDateTime = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetEnvisionSetupDateTime(struct soap *soap, const struct __ns2__GetEnvisionSetupDateTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetEnvisionSetupDateTime(soap, &a->ns1__GetEnvisionSetupDateTime);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetEnvisionSetupDateTime(struct soap *soap, const char *tag, int id, const struct __ns2__GetEnvisionSetupDateTime *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetEnvisionSetupDateTime(soap, "ns1:GetEnvisionSetupDateTime", -1, &a->ns1__GetEnvisionSetupDateTime, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetEnvisionSetupDateTime * SOAP_FMAC4 soap_in___ns2__GetEnvisionSetupDateTime(struct soap *soap, const char *tag, struct __ns2__GetEnvisionSetupDateTime *a, const char *type)
{
	size_t soap_flag_ns1__GetEnvisionSetupDateTime = 1;
	short soap_flag;
	a = (struct __ns2__GetEnvisionSetupDateTime *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetEnvisionSetupDateTime, sizeof(struct __ns2__GetEnvisionSetupDateTime), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetEnvisionSetupDateTime(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetEnvisionSetupDateTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetEnvisionSetupDateTime(soap, "ns1:GetEnvisionSetupDateTime", &a->ns1__GetEnvisionSetupDateTime, ""))
				{	soap_flag_ns1__GetEnvisionSetupDateTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetEnvisionSetupDateTime(struct soap *soap, const struct __ns2__GetEnvisionSetupDateTime *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetEnvisionSetupDateTime(soap, tag?tag:"-ns2:GetEnvisionSetupDateTime", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetEnvisionSetupDateTime * SOAP_FMAC4 soap_get___ns2__GetEnvisionSetupDateTime(struct soap *soap, struct __ns2__GetEnvisionSetupDateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetEnvisionSetupDateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns2__GetEnvisionSetupDateTime * SOAP_FMAC2 soap_instantiate___ns2__GetEnvisionSetupDateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetEnvisionSetupDateTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetEnvisionSetupDateTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__GetEnvisionSetupDateTime);
		if (size)
			*size = sizeof(struct __ns2__GetEnvisionSetupDateTime);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__GetEnvisionSetupDateTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetEnvisionSetupDateTime);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetEnvisionSetupDateTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetEnvisionSetupDateTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetEnvisionSetupDateTime %p -> %p\n", q, p));
	*(struct __ns2__GetEnvisionSetupDateTime*)p = *(struct __ns2__GetEnvisionSetupDateTime*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetStudyAreaVersionResponse(struct soap *soap, _ns1__GetStudyAreaVersionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetStudyAreaVersionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetStudyAreaVersionResponse(struct soap *soap, const char *tag, int id, _ns1__GetStudyAreaVersionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetStudyAreaVersionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetStudyAreaVersionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetStudyAreaVersionResponse(struct soap *soap, const char *tag, _ns1__GetStudyAreaVersionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetStudyAreaVersionResponse **)soap_malloc(soap, sizeof(_ns1__GetStudyAreaVersionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetStudyAreaVersionResponse *)soap_instantiate__ns1__GetStudyAreaVersionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetStudyAreaVersionResponse ** p = (_ns1__GetStudyAreaVersionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetStudyAreaVersionResponse, sizeof(_ns1__GetStudyAreaVersionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetStudyAreaVersionResponse(struct soap *soap, _ns1__GetStudyAreaVersionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetStudyAreaVersionResponse);
	if (soap_out_PointerTo_ns1__GetStudyAreaVersionResponse(soap, tag?tag:"ns1:GetStudyAreaVersionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetStudyAreaVersionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetStudyAreaVersionResponse(struct soap *soap, _ns1__GetStudyAreaVersionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetStudyAreaVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetStudyAreaVersion(struct soap *soap, _ns1__GetStudyAreaVersion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetStudyAreaVersion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetStudyAreaVersion(struct soap *soap, const char *tag, int id, _ns1__GetStudyAreaVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetStudyAreaVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetStudyAreaVersion ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetStudyAreaVersion(struct soap *soap, const char *tag, _ns1__GetStudyAreaVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetStudyAreaVersion **)soap_malloc(soap, sizeof(_ns1__GetStudyAreaVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetStudyAreaVersion *)soap_instantiate__ns1__GetStudyAreaVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetStudyAreaVersion ** p = (_ns1__GetStudyAreaVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetStudyAreaVersion, sizeof(_ns1__GetStudyAreaVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetStudyAreaVersion(struct soap *soap, _ns1__GetStudyAreaVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetStudyAreaVersion);
	if (soap_out_PointerTo_ns1__GetStudyAreaVersion(soap, tag?tag:"ns1:GetStudyAreaVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetStudyAreaVersion ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetStudyAreaVersion(struct soap *soap, _ns1__GetStudyAreaVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetStudyAreaVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse(struct soap *soap, _ns1__GetStudyAreaSetupDateTimeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse(struct soap *soap, const char *tag, int id, _ns1__GetStudyAreaSetupDateTimeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetStudyAreaSetupDateTimeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse(struct soap *soap, const char *tag, _ns1__GetStudyAreaSetupDateTimeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetStudyAreaSetupDateTimeResponse **)soap_malloc(soap, sizeof(_ns1__GetStudyAreaSetupDateTimeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetStudyAreaSetupDateTimeResponse *)soap_instantiate__ns1__GetStudyAreaSetupDateTimeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetStudyAreaSetupDateTimeResponse ** p = (_ns1__GetStudyAreaSetupDateTimeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetStudyAreaSetupDateTimeResponse, sizeof(_ns1__GetStudyAreaSetupDateTimeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse(struct soap *soap, _ns1__GetStudyAreaSetupDateTimeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse);
	if (soap_out_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse(soap, tag?tag:"ns1:GetStudyAreaSetupDateTimeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetStudyAreaSetupDateTimeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse(struct soap *soap, _ns1__GetStudyAreaSetupDateTimeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetStudyAreaSetupDateTimeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetStudyAreaSetupDateTime(struct soap *soap, _ns1__GetStudyAreaSetupDateTime *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetStudyAreaSetupDateTime))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetStudyAreaSetupDateTime(struct soap *soap, const char *tag, int id, _ns1__GetStudyAreaSetupDateTime *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetStudyAreaSetupDateTime);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetStudyAreaSetupDateTime ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetStudyAreaSetupDateTime(struct soap *soap, const char *tag, _ns1__GetStudyAreaSetupDateTime **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetStudyAreaSetupDateTime **)soap_malloc(soap, sizeof(_ns1__GetStudyAreaSetupDateTime *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetStudyAreaSetupDateTime *)soap_instantiate__ns1__GetStudyAreaSetupDateTime(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetStudyAreaSetupDateTime ** p = (_ns1__GetStudyAreaSetupDateTime **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetStudyAreaSetupDateTime, sizeof(_ns1__GetStudyAreaSetupDateTime), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetStudyAreaSetupDateTime(struct soap *soap, _ns1__GetStudyAreaSetupDateTime *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetStudyAreaSetupDateTime);
	if (soap_out_PointerTo_ns1__GetStudyAreaSetupDateTime(soap, tag?tag:"ns1:GetStudyAreaSetupDateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetStudyAreaSetupDateTime ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetStudyAreaSetupDateTime(struct soap *soap, _ns1__GetStudyAreaSetupDateTime **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetStudyAreaSetupDateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetEnvisionVersionResponse(struct soap *soap, _ns1__GetEnvisionVersionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetEnvisionVersionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetEnvisionVersionResponse(struct soap *soap, const char *tag, int id, _ns1__GetEnvisionVersionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetEnvisionVersionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetEnvisionVersionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetEnvisionVersionResponse(struct soap *soap, const char *tag, _ns1__GetEnvisionVersionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetEnvisionVersionResponse **)soap_malloc(soap, sizeof(_ns1__GetEnvisionVersionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetEnvisionVersionResponse *)soap_instantiate__ns1__GetEnvisionVersionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetEnvisionVersionResponse ** p = (_ns1__GetEnvisionVersionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetEnvisionVersionResponse, sizeof(_ns1__GetEnvisionVersionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetEnvisionVersionResponse(struct soap *soap, _ns1__GetEnvisionVersionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetEnvisionVersionResponse);
	if (soap_out_PointerTo_ns1__GetEnvisionVersionResponse(soap, tag?tag:"ns1:GetEnvisionVersionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetEnvisionVersionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetEnvisionVersionResponse(struct soap *soap, _ns1__GetEnvisionVersionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetEnvisionVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetEnvisionVersion(struct soap *soap, _ns1__GetEnvisionVersion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetEnvisionVersion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetEnvisionVersion(struct soap *soap, const char *tag, int id, _ns1__GetEnvisionVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetEnvisionVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetEnvisionVersion ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetEnvisionVersion(struct soap *soap, const char *tag, _ns1__GetEnvisionVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetEnvisionVersion **)soap_malloc(soap, sizeof(_ns1__GetEnvisionVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetEnvisionVersion *)soap_instantiate__ns1__GetEnvisionVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetEnvisionVersion ** p = (_ns1__GetEnvisionVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetEnvisionVersion, sizeof(_ns1__GetEnvisionVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetEnvisionVersion(struct soap *soap, _ns1__GetEnvisionVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetEnvisionVersion);
	if (soap_out_PointerTo_ns1__GetEnvisionVersion(soap, tag?tag:"ns1:GetEnvisionVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetEnvisionVersion ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetEnvisionVersion(struct soap *soap, _ns1__GetEnvisionVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetEnvisionVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetEnvisionSetupDateTimeResponse(struct soap *soap, _ns1__GetEnvisionSetupDateTimeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetEnvisionSetupDateTimeResponse(struct soap *soap, const char *tag, int id, _ns1__GetEnvisionSetupDateTimeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetEnvisionSetupDateTimeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetEnvisionSetupDateTimeResponse(struct soap *soap, const char *tag, _ns1__GetEnvisionSetupDateTimeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetEnvisionSetupDateTimeResponse **)soap_malloc(soap, sizeof(_ns1__GetEnvisionSetupDateTimeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetEnvisionSetupDateTimeResponse *)soap_instantiate__ns1__GetEnvisionSetupDateTimeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetEnvisionSetupDateTimeResponse ** p = (_ns1__GetEnvisionSetupDateTimeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetEnvisionSetupDateTimeResponse, sizeof(_ns1__GetEnvisionSetupDateTimeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetEnvisionSetupDateTimeResponse(struct soap *soap, _ns1__GetEnvisionSetupDateTimeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetEnvisionSetupDateTimeResponse);
	if (soap_out_PointerTo_ns1__GetEnvisionSetupDateTimeResponse(soap, tag?tag:"ns1:GetEnvisionSetupDateTimeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetEnvisionSetupDateTimeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetEnvisionSetupDateTimeResponse(struct soap *soap, _ns1__GetEnvisionSetupDateTimeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetEnvisionSetupDateTimeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetEnvisionSetupDateTime(struct soap *soap, _ns1__GetEnvisionSetupDateTime *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetEnvisionSetupDateTime))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetEnvisionSetupDateTime(struct soap *soap, const char *tag, int id, _ns1__GetEnvisionSetupDateTime *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetEnvisionSetupDateTime);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetEnvisionSetupDateTime ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetEnvisionSetupDateTime(struct soap *soap, const char *tag, _ns1__GetEnvisionSetupDateTime **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetEnvisionSetupDateTime **)soap_malloc(soap, sizeof(_ns1__GetEnvisionSetupDateTime *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetEnvisionSetupDateTime *)soap_instantiate__ns1__GetEnvisionSetupDateTime(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetEnvisionSetupDateTime ** p = (_ns1__GetEnvisionSetupDateTime **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetEnvisionSetupDateTime, sizeof(_ns1__GetEnvisionSetupDateTime), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetEnvisionSetupDateTime(struct soap *soap, _ns1__GetEnvisionSetupDateTime *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetEnvisionSetupDateTime);
	if (soap_out_PointerTo_ns1__GetEnvisionSetupDateTime(soap, tag?tag:"ns1:GetEnvisionSetupDateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetEnvisionSetupDateTime ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetEnvisionSetupDateTime(struct soap *soap, _ns1__GetEnvisionSetupDateTime **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetEnvisionSetupDateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
